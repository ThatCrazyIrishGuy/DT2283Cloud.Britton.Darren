package ie.dit.britton.darren;

import java.io.IOException;
import java.security.Principal;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.*;

import com.google.appengine.api.blobstore.BlobInfo;
import com.google.appengine.api.blobstore.BlobInfoFactory;
import com.google.appengine.api.blobstore.BlobKey;
import com.google.appengine.api.images.ImagesService;
import com.google.appengine.api.images.ImagesServiceFactory;
import com.google.appengine.api.images.ServingUrlOptions;
import com.google.appengine.api.users.UserService;
import com.google.appengine.api.users.UserServiceFactory;
import com.google.appengine.labs.repackaged.com.google.common.collect.ArrayListMultimap;
import com.google.appengine.labs.repackaged.com.google.common.collect.Multimap;

@SuppressWarnings("serial")
public class GetUserBlobs extends HttpServlet {
	public void doGet(HttpServletRequest req, HttpServletResponse resp)
			throws IOException {
		
		      Multimap<String, String>fileMap = ArrayListMultimap.create();

	          BlobKey key;
	          String servingURL;
              ServingUrlOptions suo;
	          BlobInfo blobInfo;

	          BlobDAO blobDAO = new BlobDAO();
	          BlobInfoFactory blobInfoFactory = new BlobInfoFactory();
	          ArrayList<String> blobList;

	          blobList = (ArrayList<String>) blobDAO.getUserBlobs();
	
	          ImagesService imagesService = ImagesServiceFactory.getImagesService();
	          // loop through files information returned from query
	          for(int i = 0; i < blobList.size(); i++) {
	        	  //resp.getWriter().println("blobs recieved =" + blobList.size() + "\n blobkey =" + blobList.get(i));
	              key = new BlobKey(blobList.get(i));
	              suo = ServingUrlOptions.Builder.withBlobKey(key);
	              servingURL = imagesService.getServingUrl(suo);
		          blobInfo = blobInfoFactory.loadBlobInfo(key);
	              
	              fileMap.put(servingURL, blobInfoFactory.loadBlobInfo(key).getFilename());
	              fileMap.put(servingURL, blobInfo.getFilename());
	              fileMap.put(servingURL, blobInfo.getCreation().toString());
	              fileMap.put(servingURL, String.valueOf(blobInfo.getSize() / 1024 / 1024));
	         }
	          
	          req.setAttribute("blobNames", blobNames);
	          req.setAttribute("fileURLs", fileURLs);
          
	          RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/myImages.jsp");
	          try {
				dispatcher.forward(req, resp);
			} catch (ServletException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}	

